文本样式
内部引用
<p style="color:red;font-size:50px;">xxxxxxxxxx</p>
<head>
	<meta charset="utf-8">
	<title>css样式</title>
	<style type="text/css">
p{color: green; font-style: italic/*倾斜或normal*/; font-weight: 500/*字体粗细0-900取整*/; font-size: 100px/*字体大小*/; font-family: 楷体;}
h1{font: normal 900 50px 宋体;}/*这个是连写*/
	</style>
</head>
<body>
	<h1>问候语</h1>
	<p>你好，大猫</p> 
</body>
外部引用 在外面建一个.css的层叠样式表p{color: green;font: 100px 楷体}
两个.css的表格可以相互引用 用@import url(style2.css);引用
<head>
	<meta charset="utf-8">
	<title>css样式</title>
	<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
	<h1>问候语</h1>
	<p>你好，大猫</p> 
</body>
样式
<style type="text/css">
	h1{
/*颜色的四种表示方法*/
		color: rgb(123,56,148);
		color: rgba(44,55,66,0.4);
		color: #FF5566;
		color: #f56;
		
		text-decoration: line-through;
/*underline|overline|line-through|none*/
		text-align: center;
/*文本对齐样式left(默认)|center|right*/
		text-indent: 2em;
/*首行缩进，数字＋单位(px|em);这个单位可以是px可以是em(一个文字的宽度),用的最多的还是em*/
		text-shadow: 2px 2px 2px red;
/*水平偏移距离 垂直偏移距离 模糊距离 阴影颜色;*/
		width: 1000px;
 		white-space:nowrap; /*空白符处理
 		normal默认值,文字超出容器宽度会自动换行,容器会变高
 		nowrap,文字超出容器宽度不会换行文本会在同一行上溢出。*/
  			
  		text-overflow: clip;
  		overflow: hidden;
  /*文本溢出处理方式 clip剪贴ellipsis显示省略号...*/
  		word-wrap: normal;
  /*长单词换行到下一行 break-word单词换行*/
	}
</style>

选择器
类选择器
id选择器 交集,并集选择器
相邻兄弟选择器 通用兄弟选择器
<head>
	<meta charset="utf-8">
 	<title>选择器</title>
 	<style type="text/css">
		.dang{/*类选择器*/color: blue;}
		#a1{/*id选择器，页面上所有的ID不能重复*/color: green;}
		/*类和id只能以下划线和英文字符开头，ID不是用来作为选择器添加样式的，它的主要作用是给JS使用*/
		body h2{/*后代选择器，body标签下所有h2标签都会被执行*/font-size: 50px;}
		body>p{/*子选择器，body标签下的前三个p标签被选择*/font-family: 楷体;}
		p.dang{/*交集选择器，p标签前两个被选中*/font-style: italic;}
		p,.dang/*并集选择器，所有p和.dang都会被选中*/
		p+h2/*相邻兄弟选择器，选中的是第一个h2*/
		p~h2/*通用兄弟选择器，选中的是p的向下兄弟所有的h2标签*/
                选择器可以是标签，ID，类
 	</style>
 </head>
 <body>
 		<p class="dang">你有糖吗</p>
 		<p class="dang">你有糖吗</p>
 		<p id="a1">你有糖吗</p>
 	<nav>
 		<p>你有糖吗</p>
 		<h2 class="dang">你有糖吗</h2>
 		<h2>你有糖吗</h2>
 	</nav>
 </body>
序选择器
<head>
<meta charset="utf-8">
<title>13</title>
	<style type="text/css">
		p:first-child{    }
	/*找到同级别的第一个元素不区分类型7和12被选中*/
		p:last-child{   }
	/*找到同级别的最后一个元素不区分类型15被选中*/
		p:nth-child(n){color: red;}
	/*找到同级别的第n个元素不区分类型,n可以写为nx+y*/
		p:only-child{}
	/*不区分类型的同级别唯一元素*/
		p:first-of-type{color: red;}
	/*找到同级别的第一个元素区分类型2.7.12被选中*/
		p:last-of-type{  }
	/*找到同级别的最后一个元素区分类型6.10.15被选中*/
		p:nth-of-type(n){color: red;}
	</style>
</head>
<body>
	<h2>1</h2>
	<P>2</P>
	<P>3</P>
	<P>4</P>
	<P>5</P>
	<P>6</P>
	<div>
		<p>7</p>
		<p>8</p>
		<p>9</p>
		<p>10</p>
		<h2>11</h2>
		<ul>
			<li>
				<p>12</p>
				<p>13</p>
				<p>14</p>
				<p>15</p>
			</li>
		</ul>
	</div>
</body>
属性选择器
<head>
<title></title>
<style type="text/css">
	[title]{color: green}
	[title="qwert"]{color: red;}
	[title|="qwert"]{}
/*属性的值以qwert开始,只能选中用“-”分隔的和独立的,是CSS2中的选择器*/
	[title^="qwert"]{}
/*所有以qwert属性值开始的都可以选中,
是CSS3中的选择器*/
	[title$="qwert"]{}
/*所有以属性值结尾的都可以选中,是CSS3中的选择器*/
	[title~="qwert"]{}
/*属性值包括什么，只能选中包括用空格分隔的和独立的,是CSS2中的选择器*/
	[title*="qwert"]{}
/*所有包括该属性值的都可以选中,是CSS3中的选择器*/
</style>
</head>
<body>
	<a href="#" title="">title</a>
	<a href="#" title="qwert">qwert</a>
	<a href="#" title="qwert yu">qwert yu</a>
	<a href="#" title="qwert_yu">qwert-yu</a>
	<a href="#" title="aaa.qwert">aaa.qwert</a>
	<a href="#" title="aaa.qwert.www">aaa.qwert.www</a>
	<a href="#" title="qwertyuiop">qwertyuiop</a>
	<p>我是谁</p>
</body>
通用选择器 伪选择器
<head>
<title>1111</title>
<style type="text/css">
	*{color: red;}
/*通用选择器所有元素都被变红*/
	a:link{color: green}
/*默认状态*/
	a:visited{color: }
/*被访问过*/
	a:hover{color: }
/*鼠标悬停时*/
	a:active{color: }
/*鼠标点击时*/
/*四种状态可以同时都写，也可以单独写,如果全写的情况下必须遵循一定的顺序，特别是active要写到hover后面,否则就会被覆盖,因为点击的同时鼠标肯定是悬停在内容上的,hover对其他元素也起作用*/
	input:focus{outline-color: red;}
/*获取焦点边框颜色*/
	p:before{content: "你好"}
	p:after{content: "你好"}
/*在p标签的前后加上content*/
	</style>
</head>
<body>
	<h1>标题</h1>
	<p>段落</p>
	<a href="#">百度一下</a>
	<input type="text" name="text">
</body>

盒子模型
1.
width: 300px;
height: 300px;
border: 50px solid pink;
border:宽度 样式 颜色
 颜色可以省略，默认的是黑色
 常见样式有dotted(点状),dashed(虚线),solid(实线)
 宽度可以省略，默认是1px
2.
border-width: 100px;
border-style: solid;
border-color: black;
 border-width:上 右 下 左;
 border-style:上 右 下 左;
 border-color:上 右 下 左;
按照顺时针方向设置，如果省略了一个边，就取对边的值，如果只设置了一个边，那么所有的边都一样
3.
border-top: 120px solid red;
border-right: 150px solid yellow;
border-bottom: 150px solid green;
border-left: 100px solid blue;
4.
 border-top-width: 宽度;
 border-top-style: 样式;
 border-top-color: 颜色;
 border-right-width: 宽度;
 border-right-style: 样式;
 border-right-color: 颜色;
 border-bottom-width: 宽度;
 border-bottom-style: 样式;
 border-bottom-color: 颜色;
 border-left-width: 宽度;
 border-left-style: 样式;
 border-left-color: 颜色;
内边距
padding:上 右 下 左;
按照顺时针方向设置。如果省略了一个边，就取对边的值，如果只设置了一个边，那么所有的边都一样
当设置内边距时会使盒子变大，可以设置box-sizing: border-box;使内容边距变小 盒子大小不变 
content-box为默认值 作用使盒子变大 内容区域不变
外边距
margin:上 右 下 左;
按照顺时针方向设置。如果省略了一个边，就取对边的值，如果只设置了一个边，那么所有的边都一样
水平方向上的margin值可以叠加
普通元素垂直方向上的margin值发生重叠现象，重叠后取较大的值
普通的父子元素，给子元素设置margin top时候，这个值会传递到父元素,可以通过给父元素添加边框或者是内边距来阻止margin值的传递,还可以给父元素添加overflow:hidden来阻止margin的值传递
外边距没有背景色
外边距不会影响元素的宽和高，但是会影响整个元素空间的宽和高
padding主要是用来设置父元素和子元素之间的距离，margin主要是用来设置元素和元素之间的距离
margin可以取负值,表示相反的方向
内容
元素的宽width和高height决定了真正可以填充内容的空间
取值可以是具体的像素也可以是百分比,百分比是相对于自己的父元素来说的
display: inline-block;使两个盒子水平排版
当两个盒子属于父子关系使，设置子盒子的width,height值时可以设置为百分比，相当父盒子的宽高
盒子的圆角
 border-radius: 150px;/*或50%*/
 border-radius:取值1(左上 右上 右下 左下)/[取值2(左上 右上 右下 左下)]*/
 border-top-left-radius:取值1 [取值2];
 border-top-right-radius:取值1 [取值2];
 border-bottom-right-radius:取值1 [取值2];
 border-bottom-left-radius:取值1 [取值2];取值可以是px也可以是百分比
（width: 100px;
height: 100px;
border-right: 10px solid red;
border-top-right-radius: 60px;
border-bottom-right-radius: 60px;）月牙形状 通过只设置一个盒子的边来完成
盒子行高和阴影
line-height: 40px;
使行高变为知道的数值利于计算内边距和其他数值*/
padding: 10px 10px;
利用内边距的设置及计算使文字在方框内垂直居中*/
box-shadow: 2px 2px 2px 2px black;
水平距离 垂直距离 模糊距离 阴影大小 阴影颜色 内外阴影默认outset，inset;
div:hover{
box-shadow: 2px 2px 2px 2px black;/*当鼠标悬浮到盒子时显示的阴影*/
cursor: pointer;当鼠标悬浮到盒子时的鼠标图标*/}
盒子背景图片大小位置处理
background-image: url(../54/修罗.jpg);
background-color: green;
background-repeat: no-repeat;
repeat-x只在水平方向上平铺repeat-y只在垂直方向上平铺*/
background-attachment: fixed;
scroll(背景图片会随着滚动条的滚动而滚动)|fixed(背景图片固定在某个位置,不随滚动条的滚动而滚动)*/
background-position: center center;
background-position: 水平移动距离垂直移动距离
取值:具体的数值+px|方向单词
水平:right center left 垂直:top center bottom移动的参考点是容器的左上点
background: url(../54/修罗.jpg) green no-repeat fixed center center;连写
background-size:100% 100%;
background-size:宽度 高度 | 单词 
宽度和高度的取值有:
具体的像素
百分比(相对于容器)
auto auto(谁设置为auto把谁等比拉伸)
单词的取值有:
cover,图片等比拉伸到宽度和高度都填满元素，图片不变形，但可能会显示不全
contain,图片等比拉伸到宽度或高度中的一个填满元素另一个等比扩大或缩小，显示完全，不变形，但在整个盒子中可能会有空白区域
background-origin:padding-box;
格式padding-box(从内边距开始显示)border-box(从边框开始显示)content-box(从内容区域开始显示)
注意点:该属性用来指定从哪个区域开始显示背景图片,默认是padding-box
background-clip:padding-box;
格式padding-box(从内边距开始显示)border-box(从边框开始显示)content-box(从内容区域开始显示)
注意点:该属性用来指定从哪个区域开始显示背景颜色,默认是border-box*/