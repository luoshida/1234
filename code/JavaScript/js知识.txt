	js基本格式

1.写在元素标签的起始标签中
<body>
	<input type="checkbox" name="check" 
	onclick="abc.style.display='none';" 
	onmouseover="document.getElementById('abc').style.border='none';" 
	onmouseout="document.getElementById('abc').style.border='1px solid red'">
	<div id="abc">123</div>
</body>
2.写在script标签中
<head>
<script type="text/javascript">
	function nihao(){  (定义)
		alert('hi')
	}
	nihao()            (执行)
	
	function change(){ (定义)
		var abc=document.getElementById('box')
		abc.style.background='green';
		abc.style.width='200px';
		}
	</script>
</head>
<body>
	<div id="box" onclick="change()"(执行)></div>
</body>
注意事项
任何属性都可以修改
任何标签都可以有ID属性,可以通过ID属性获取该元素
修改属性时，HTML当中怎么写，JS当中就怎么写,但class是特例,用className
修改样式的格式：xxx.style.属性＝值
JS用style修改属性时，如果CSS的属性有"-"的话，通常把"-"去掉，然后把"-"后面的单词首字母大写
可以把多行代码写在一起,然后给他起个名字,这就是函数
函数分为定义和执行,二者缺一不可 
函数可以多次执行
变量相当于值的一个别名,变量出现的地方就相当于值本身

	js外部引用

<script defer='defer'/async='async' src="font.js">
在外部引用一个.js文件实现js的使用
</script>
延迟属性defer,添加该属性后,脚本文件会在整个页面都解析完毕后执行
异步属性async,添加该属性后,脚本会立即下载执行,但不妨碍页面中的其他操作

	js语法

 noscript标签
指定在不支持脚本的浏览器中显示替代内容
代替内容只在以下情况出现
浏览器自身不支持脚本
浏览器持脚本,但是被禁用了
<body>
<noscript>
	<p>您没有脚本执行的环境，请。。。</p>	
</noscript>
</body>
 严格模式(strict mode)
作用:告诉JS引擎切换到严格模式下解析代码,这种模式可以消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为,这是在ES5中新增的一种运行模式
使用:针对整个文件,将"use strict"放在脚本文件的第一行,则整个脚本都将以"严格模式"运行,如果这行语句不在第一行,则无效
针对单个函数,将"use strict"放在函数体的第一行,则整个函数以"严格模式"运行。
注意点:同样的代码,在"严格模式"中,可能会有不一样的运行结果;一些在"正常模式"下可以运行的语句,在"严格模式"下将不能运行
<script> 针对整个文件			
	'use strict'			
        function sayHi(){           		
		alert(!this);					
        }       
        sayHi();
</script>
<script> 针对单个函数			
	function sayHi(){ 
		'use strict'          		
		alert(!this);					
        }       
        sayHi();
</script>


	js语法规范

 区分大小写
标示符(变量,函数,属性,参数的名字)的规则
第一个字符必须是字母,下划线(_)或者美元符号($)
其他字符可以是字母,下划线(_)或者美元符号($)或者数字
命名一般采用驼峰大小写格式,即第一个字母小写,剩下的每个单词首字母大写
不能用关键字,保留字做为标示符 
 单行注释
// 我是单行注释
 多行注释
/*我是多行注释*/
语句结尾的分号不是必须的,但建议都加上
### 程序的流程控制
#### 1. 顺序结构
> 按照代码书写的先后顺序来执行,这是程序的默认执行方式

#### 2. 分支结构

* 语法

```javascript
if(条件){
    语句
}else{
    语句
}
```
* 注意点
> 条件是一个布尔值,布尔值只有真或者假

案例:弹出菜单

#### 3. 循环结构

* 语法1-while循环
```
初始值;
while(循环退出条件){
    循环体(语句)
    循环退出条件的改变
}
```

* 语法2-for循环
```
for(初始值;循环退出条件;循环退出条件的改变){
    循环体(语句)
}
```

### 函数
* 函数的参数,参数其实就是一个占位符号,只有在调用的时候才来赋值,经常变的部分用参数
* 匿名函数,没有名字的函数就是匿名函数
* 案例1:改变元素的样式
* 注意点:

> * 在使用属性时,用[]可以代替所有的.,但是.不一定能代替[]

### 数组
数据的有序列表

* 注意点:

> * 可以通过下标来访问数组中的元素
> * 数组的下标是从0开始的
> * 可以通过数组的length属性获取到数组的长度
> * getElementsByTagName方法获取的数据返回的就是一个数组


### 1. 变量的类型
* Undefined 未定义

> * 未定义类型只有一个值undefined,这个值的意思是变量没有定义
> * 未定义有两种情况,一个是真的没有定义,一个是定义了但是没有赋值

* Null 空对象

> * 空对象类型只有一个值null,代表一个空对象指针

* Boolean 布尔类型

> * 布尔类型有两个值:true和false

* Number 数字类型

> * 用来表示数字
> * 可以表示整数和小数(也叫浮点数或者双精度数)

* String 字符串类型

> * 用单引号或者双引号括起来的字符序列
> * 单引号和双引号表示的字符串完全一样

* Object 对象类型
var car = {type:"Fiat", model:500, color:"white"};
变量是 type model color
值是 fiat 500 white
> * 对象是一组数据和功能的集合
  * 对象是变量的容器
  * 对象是属性和方法的容器。
  * 对象的方法定义了一个函数，并作为对象的属性存储
> * null代表了一个空对象指针,所以用 typeof 检测时会返回 'object'
> * 函数在ES中是对象,但函数也有一些特殊的属性,所以用 typeof 检测时会返回 'function'
> * 数组在ES中是对象

* 注意点:JS变量的类型由值决定,并且随着值的变化而变化

### 2.  转数值 能把首位不是字符的字符串转化为数字
* 显式转换parseInt 和 parseFloat 

例如：'a123' 不会转化 返回一个NaN
'12a3' 转化为12 返回一个number类型的数字

> * parseInt用来转换整数,parseFloat可以转换整数和小数
> * 转换规则为
>> * 忽略字符串前面的空格
>> * 如果第一个字符不是数字或者负号加数字,会返回NaN(Not a Number)
>> * 从左到右解析直到第一个非数字为止 

* isNaN

> 由于NaN和NaN并不相等,所以用isNaN函数来判断转换后的值是不是数字

* 隐式转换

> 减法(-) 乘法(*) 除法(/) 比较(==)



### 3. 转字符串
* toString()
* +"" 
toString(xxx) 转化xxx为'xxx';

### 4. 布尔值
> * 真:true,非零数字,非空字符,非空对象,
> * 假:false,数字零,空字符,null,undefined


### 5. 变量的作用域
* 全局变量 

> 定义在所有函数外面,所有的函数都可以使用的变量

* 局部变量

> 定义在函数的内部,指定在函数内部或者函数的子函数中使用

### 6. 闭包
子函数可以使用父函数中的变量的一种现象

### 6.5 变量的提升
定义会被提升 赋值不会被提升

### 7. 变量的类型
* 基本类型

> * 基本类型指定的是简单的数据,包括,Undefined,Null,Boolean,Number,String
> * 基本类型访问的变量的实际值
> * 基本类型不能动态的添加属性
> * 基本类型变量复制时会新建一个变量并分配空间,将变量的值分配在新的空间上

* 引用类型

> * 引用类型主要指保存在内存中的对象,包括对象,数组,函数
> * 引用类型访问的是引用,引用是指向内存的一个指针
> * 引用类型可以动态的添加属性
> * 引用类型复制时不会新建空间,只是复制了一个新的引用

* 引用类型

### 8. 变量命名

* 变量名 = 类型 + 对象描述

> * 类型指变量的数据类型,JS命名类型有
>> array 数组a
>> 
>> boolean 布尔值b
>> 
>> float 浮点数l
>> 
>> function 函数fn
>> 
>> int 整型i
>> 
>> object 对象o
>> 
>> regular 正则r
>> 
>> string 字符串s
> * 对象描述指对象名字全称或名字的一部分，要求有明确含义，命名要容易记忆容易理解
### 1. 算数

> 加(+), 减(-), 乘(*), 除(/), 模(%),++,- -
> 


### 2. 赋值

a+=4 意义为 a=a+4;
> =, +=, -=, *=, /=, %= 


### 3. 关系
== 不区分类型的相等 计算时会先转换类型，再比较 <相等式>
!= 相等式的非形式
=== 区分类型的相等 计算时不做类型转变，类型不同就一定不等  <恒等式>
!== 恒等式的非形式
> <, >,<=,>=,==,!=,===,!== 


### 4. 逻辑

> 与(&&),或(||),否/非(!)

### 5. 优先级

> 括号()
### 函数参数
* 函数的参数,参数其实就是一个占位符号,只有在调用的时候才来赋值,经常变的部分用参数
* 匿名函数,没有名字的函数就是匿名函数
* 注意点:

> * 在使用属性时,用'[]'可以代替所有的'.',但是'.'不一定能代替'[]'



### 函数的返回值
在函数体内通过return把函数的执行结果返回
> * 一个函数只能有一个返回值
> * 没有返回值或者只有return的函数返回值是undefined
> * 函数的返回值是在调用的时候获取的

### 变量的作用域
* 全局变量 

> 定义在所有函数外面,所有的函数都可以使用的变量

* 局部变量

> 定义在函数的内部,指定在函数内部或者函数的子函数中使用

* 作用域的决定

> 函数执行时依赖于变量的作用域,这个作用域时在定义的时候决定的,而不时在调用的时候决定

### 闭包
子函数可以使用父函数中的变量
当在函数内部的定义变量不用var a=1;时 用a=1;时 该定义变量会成为全局定义变量

### 函数function(){}作用域
* 块级作用域:在代码块(花括号中的代码)中声明的变量在代码块外不可用
* 函数作用域:在函数内部声明的变量在函数内部以及子函数中都可以使用
* JS没有块级作用域,而是函数作用域
* JS中因为是函数作用域,所以有声明提升的现象,即JS函数中声明的所有变量(不涉及赋值)都被提前到函数的顶部

### 递归调用
自己调用自己的函数

> * 案例:阶乘的计算

### 函数的不定参数
> * 每一个函数都有一个参数数组,数组的名字是arguments
> * 参数数组中的值由‘调用时’传递,按照传递参数的顺序存储在数组中
> * 案例1:求和函数
> * 案例2:获取和设置样式函数

### 获取样式函数
* 获取行间样式 obj.style[attr]
* 获取系统已定义过的参数 与行间样式 getComputedStyle(obj,false)[attr]

 ### 数组的定义
* 方法1 通过Array构造函数
```
var arr = new Array(1,2,3);
```

* 方法2 通过数组字面量[]
```
var arr = [1,2,3]
```
* 注意点

> * 方法1和方法2的作用时一样的,方法2效率上更高一些 
> * 可以改变数组的length属性,改变后的值时数组的实际长度,可以通过这种方法清空数组

### 数组的操作
var arr=[];
arr.push(元素) 在arr数组末尾添加()内元素
arr.pop()  删除arr数组的末尾元素
arr.shift() 删除arr数组的第一个元素
arr.unshift(元素) 把()内元素添加到arr数组的头部
arr.splice(起始下标,删除个数,插入值1,插入值2...)
join(字符) 用指定的字符连接数组
数组1.concat(数组2) 把数组1和数组2合并生成一个新的数组
slice(起始下标,结束下标) 基于当前数组创建一个新数组
indexOf(查找项,起始下标) 从数组头部开始向后查找,返回查找到的数组的下标,如果没有找到返回-1
lastIndexOf(查找项,起始下标) 从数组未部开始向前查找,返回查找到的数组的下标,如果没有找到返回-1

var theStr='12ad16fg'
for(var i=0;i<theStr.length;i++){
	theStr.charAt(i)
};此方法可以获取所有str1的元素


### 数组的排序sort()
(内可以定义一个函数用来排序)
* 按字符排序
* 指定排序函数

### 去除数组的重复元素
* 数组是引用类型

### DOM基础

* DOM节点介绍

* 子节点

> * 节点的分类
>> 文本节点
>> 
>> 元素节点
> * 获取子节点的方法
var aLi=aUl.childNodes 获取父元素的所有子节点
var aLi=aUl.children 获取父元素的所有元素节点 children[0]第一个

>> * oParentNode.childNodes,返回一个数组,包含父节点中的所有文本节点和元素节点
>> * 通过nodeType属性来判断节点的类型,1为元素节点,3为文本节点
>> * oParentNode.children,返回一个数组, 包含父节点中的所有元素节点

* 父节点
> * 获取子节点的方法
var oBox2.parentNode 获取子元素的父节点
var oBox2.offsetParent 获取参考绝对定位贴靠的元素节点

> * oNode.parentNode,子节点的父节点对象
> * oNode.offsetParent,子节点绝对定位时,获取参考的父节点对象 
> * 隐藏父元素案例

* 首尾子节点

> * xxx的第一个子节点 xxx.firstChild, 
xxx的第一个元素子节点 xxx.firstElementChild，
xxx的最后一个元素子节点 xxx.lastChild
xxx的最后一个元素子节点 xxx.lastElementChild，
> * lastChild, lastElementChild

* 兄弟节点

> * 下一个兄弟节点nextSibling,
下一个兄弟元素节点nextElementSibling
> * 前一个兄弟节点previousSibling,
前一个兄弟元素节点previousElementSibling

* 操作属性，设置的为属性例如value='';bgcolor='',而不是行间style样式。

> * 获取属性的值:getAttribute(名称),有属性获取值,没有属性返回null 
> * 设置属性:setAttribute(名称,值) 例如xxx.setAttribute('value','123')
> * 删除属性:removeAttribute(名称) 

* 通过类名获取元素集合

> * 封装函数

* 创建元素
> document.createElement('标签名')
var node=document.createElement('li')
* 追加元素
> parentNode.appendChild(node)在父元素所有子元素的末尾插入名字为node的子元素

* 插入元素
> parentNode.insertBefore(node1,node2),在node2之前插入node1

* 删除元素
> parentNode.removeChild(node)


> * 删除父元素案例

### DOM 应用
* 获取表格元素
var str='ABcdE'
str.toLowerCase() 把字符串变成小写'abcde'

var str='ABcdE'
str.search() !=-1 假如()内元素在str数组'ABcdE'内 输出结果为正值 否则为-1

var str='ABcdE'
str.split('') 能把长的字符串分割成单元素数组'A''B''c''d''E'

> * 隔行变色案例
> * 添加删除行
> * 搜索内容
>> * toLowerCase()
>> * search
>> * split

* 按内容排序

### 定时器
* setInterval(fn,时间) 开启循环型定时器
* setTimeout(fn,时间) 开启延迟型定时器

* clearInterval(定时器) 关闭循环型定时器
* clearTimeout(定时器) 关闭延迟型定时器
关闭的为开启时的定时器

* 注意点:
按照异步类型执行 同步执行完进行异步操作
> * 循环型定时器在定时器关闭前会一直按照设定的间隔时间执行,延迟型定时器只执行一次
> * 定时器中指定的时间指的是该时间后把代码加入到执行队列中,如果队列空闲就立即执行

* 案例1:数码时钟
var now = new Date()
var h=now.getHours()
var m=now.getMinutes()
var s=now.getSeconds()
> * 系统时间对象 Date,方法 getHours、getMinutes、getSeconds,getFullYear(),getMonth(),getDate(),getDay()
> * 字符串的charAt方法



obox.offsetLeft 获取obox的left值
offsetRight/Top/Width/Height

绝对值
Math.abs(数值) 把()内的值变为正数

> Math.abs(num) 取num的绝对值

### 变速动画

* 扩充知识点:

> Math.ceil(num) 向上取整
> Math.floor(num) 向下取整

* 案例侧边栏固定(底部和中部)
* 案例顶部滚出导航

> * 扩充知识点:
>> * window.innerWidth 窗口可视宽度
>> * window.innerHeight 窗口可视高度
>> * document.body.scrollTop 滚动距离,safari用
>> * document.documentElement.scrollTop 滚动距离,chrome/ff...用
>> * window.onresize事件,窗口大小发生变化时触发
>> * window.onscroll事件,滚动条变化时触发
 
### 多物体

* 定时器加在对象上
* offsetWidht/offsetHeight指的是元素的宽和高,而不是内容的宽和高,所以用getComputedStyle

### 任意值

* 对透明度单独处理

* 扩充知识点:

> Math.round(num) 四舍五入

### 链式动画

* 参数接受一个函数

### 多值动画

* 参数接受一个对象,对象里指定属性和值
### window对象
* window代表一个浏览器对象
* window对象是一个全局对象,因此在全局作用域中声明的变量函数会变成window对象的属性和方法

### window.open()
> 打开一个新窗口并进入新打开的窗口对象

* window.open("about:blank","_blank");
* window.open("about:blank");默认blank
* window.open("about:blank","_self");
* window.open("http://www.kuazhu.com");


### window.close()
* 不能关闭用户打开的窗口

### window.navigator.userAgent
* 当前浏览器的信息

### window.location
* 当前页面的相关信息对象,可以读取和赋值
* document.location和window.location是同一个对象
* window.location.href 属性代表当前页面的完整url
* window.location.assign(url),assign方法会打开url,如果把location.href或者location设置为一个url值,也会调用assign方法
* location的其他属性

> host
> hostname
> pathname
> port
> search

### window.histroy
* 用户上网的记录,从窗口被打开的那一刻算起
history.go(-1) == history.back()
history.go(1) == history.forward()

### 交互
var res = prompt("请输入你的姓名？");

var res = confirm("你确定删除吗?");

### 事件对象 event

* 事件对象兼容处理

* 事件流

> 事件冒泡
> 事件冒泡指具体元素接受事件,然后逐级向上传播事件
> 阻止事件冒泡 event.stopPropagation()
Propagation 传播



### 鼠标事件
* 鼠标移动 onmousemove  

* 获取坐标

> event.clientX 和 event.clientY是鼠标的可视区坐标
> 通常情况需要加上滚动距离

* 案例1: 随着鼠标移动的物体
* 案例2: 随着鼠标移动的多个物体

### 键盘事件
* 键盘按下 obj.onkeydown
* 键盘抬起 obj.onkeyup
* 键盘代码 event.keyCode  event.keyCode==12 值为数字
* 辅助键 event.ctrlKey 
		 event.shiftKey 
		 event.altKey


 
### 默认行为

> 默认行为是浏览器的自带行为

* document.oncontextmenu 右键菜单

* 阻止默认行为

> * 方法一  return false
> * 方法二  event.preventDefault()

* 案例1:右键菜单
* 案例2:只能输入数字的输入框

### 拖拽

> 原理:鼠标和物体的距离始终不变

obj.onmousedown 当鼠标按下去时
obj.onmouseup 当鼠标按键被松开
document.onmousewheel 鼠标滚轮事件
oEvent.wheelDelta 向下滚滚轮为正值向上滚滚轮为负值

> * 基础拖拽
> * 限制在浏览器中
> * 限制在父容器中
> * 磁性吸附
> * 带框的拖拽
> * 自定义滚动条(控制大小,控制透明度,控制文字)

### 生成随机数

* Math.random()

### 事件

* 事件是用户或者浏览器执行的某中动作,如click/mouseover

* 事件处理程序是响应事件的函数,事件处理程序以on开头,如onclick/onmouseover

* 事件绑定 

> obj.addEventListener(事件名,函数,false)
> 事件名没有'on'

* 事件移除

> obj.removeEventListener(事件名,函数,false)
> 移除事件监听只能是移除有函数名的，不能移除匿名函数的


* 事件委托

利用事件冒泡来达到委托的效果

### event对象常见的属性和方法总结

> event.type 当前事件类型
> event.target 事件源对象,直接点击的对象
* event.currentTarget 绑定事件的对象
* event.clientY/event.clientX 可视区(浏览器)的内沿到鼠标的距离
* event.pageY/event.pageX 可视区(浏览器)的内沿加滚动距离到鼠标的距离
* event.screenY/event.screenX 显示器屏幕内沿到鼠标的距离

* event.preventDefault() 阻止默认行为
* event.stopPropagation() 阻止冒泡

* event.keyCode 键盘编码
* event.ctrlKey event.shiftKey event.altKey 辅助键

> * 蒙板效果

### 常见事件类型总结
onload
onscroll
onresize

onclick
onmouseover/onmouseenter
> * 鼠标穿过事件源对象或其子元素时触发onmouseover,对应的有onmouseout
> * 鼠标穿过事件源对象时触发，无视冒泡行为onmouseenter,对应的有onmouseleave

onmouseout/onmouseleave
onmousemove
onmousedown
onmouseup

onkeydown
onkeyup


###   表单事件
onfocus    表单获取焦点触发
onblur     表单失去焦点触发
onchange   页面内容有改动,失去焦点执行
onkeypress 键按下去触发,键不抬起会一直触发
onkeyup    键抬起触发,包括功能键
oninput    输入后触发,不包括功能键
onsubmit   form表单提交事件
onreset    form表单重置事件

> * 简单提交验证和输入提示
 
### 对象的基本概念
* 什么是对象

> 对象就是一个可以提供特定功能的黑盒子,使用者不用关心功能的具体实现,只要知道怎么用就可以了

> 举例:电视就是一个对象,通过遥控器或者电视面板上的按钮操作电视

* 什么是面向对象的程序设计

> 开发具有特定功能的黑盒子

* 对象学什么

> * 使用对象 如:Date/Array/Math...
> * 开发自己的对象

* 对象的特点

> * 封装 把具体的功能实现包起来,对外不公开
> * 抽象 根据具体的业务需求把需要的属性和方法抽取出来
> * 继承 子类具有父类的方法和属性,然后子类再开发自己特有的方法和属性
> * 多态 把子类赋给父类,赋值后的父类具有子类的特性

* 对象的组成

> * 属性(变量)
> * 方法(函数) 

### 创建对象
* 字面量创建

> * 单体对象,适合整个系统只有一个对象的场景
> * 对象属性的特征:无序唯一
>> * 对象属性特征的应用,去除重复数组
>>> * 把数组里面的值转换为对象的属性,由于对象的属性不能重复，所以此时对象的属性就把重复的值过滤掉
>>> * 把对象的属性转换为数组的值

> * js对象和json的区别

>> * json是一种数据传输格式,js对象是类的实例,不能直接传输
>> * json的键必须添加双引号,值不能是函数,js对象键不用加双引号,值可以是任意类型,如果js对象的属性不是一个合法的变量名时需要加双引号
>> * json可以通过JSON.parse(jsonstr)转换为js对象,js对象可以用JSON.stringify(jsobj)转换为json

* 构造函数创建

> * 用系统自带的对象创建对象
>> * 缺点:会有把系统自带的方法和属性覆盖掉的风险
> * 用Object对象来创建对象
>> * Object是所有对象的父类
>> * 创建的对象方法和属性不能共用
> * 用工厂模式的函数创建对象
>> * 不能用new来创建对象
>> * 方法不能被实例共享,每个对象实例都生成一个相同的方法

> * 用new关键字创建对象 － 构造函数

>> * new 的作用,函数会在一开始创建一个对象，并且这个对象就是this,最后会把这个this对象返回出去

>> * 直接用new后可以把用工厂模式函数中创建对象和返回对象省略,但是方法还是不能被实例共享
>> * 用new后,把工厂模式函数可以看做是类,类名一般首字母大写
> * 构造函数方法共享－将构造函数里面的方法指向全局函数
>> * 缺点1.全局函数会在其他地方调用，这时会有风险
>> * 缺点2.如果方法太多，就需要创建大量的全局函数
>> * 缺点3.违背面向对象的封装特性
> * 构造原型模式
>> * 原型 prototype 是存在于构造函数上的一个对象,所有的实例对象都可以访问原型对象
>> * 可以在原型对象prototype添加共用的属性或者方法
>> * 变化的属性和方法写在构造器中 
> * 动态原型模式
>> * 可以把原型对象prototype上的定义写在构造函数中,定义之前需要唯一执行判断

### 对象中的名词解释
构造函数和类
> 用来创建对象的函数叫构造函数,也叫类

对象实例 
> 由构造函数创建的一个具体的对象

静态方法和实例方法
> 添加在构造函数上的方法是静态方法,静态方法的调用方法是 构造函数.方法名()
> 添加在构造函数的原型对象上的方法是实例方法,静态方法的调用方法是 对象的实例.方法名()

### 内存分析

<img src="img/014-001.png">

### 原型链和继承
* 原型链

> * 原型就是一个对象，所有的实例共享对象上的方法和属性
> * 一但有构造函数，系统会自动的给构造函数添加一个原型对象prototype
> * 系统会给原型对象上添加一个constructor对象(prototype.constructor)，就是构造器，整个构造器指向构造函数本身
> * 系统会给原型对象上添加另外一个__proto__的对象(prototype.__proto__)，该对象指向Object的原型对象(Object.prototype)
> * Object的原型对象(Object.prototype) 里面也有constructor对象和__proto__对象,constructor对象指向Object自己，__proto__对象指向null
> * Object的原型对象(Object.prototype) 里面除了constructor对象和__proto__对象外，还有一些系统自带的方法，比如toString(),valueOf()等等
> * 可以在原型对象上添加自己的方法和属性，这些方法和属性也会被所有的实例共享
> * 对象的实例有自己的属性和方法,同时系统会给对象实例添加__proto__对象，__proto__对象对象就是构造函数的原型对象
>* 实例对象的__proto__对象-->构造函数的原型对象，构造函数的原型对象的__proto__-->Object的原型对象，Object的原型对象的__proto__ -->null

* 原型链上的属性

> 属性的添加
>> 在实例上添加一个实例上的同名属性会覆盖原来的
>> 如果在实例对象上添加了一个构造函数原型对象上的同名属性，访问时会找到实例对象上的该属性 
> 属性的删除
>> 通过delete 删除属性
>> 删除实质是判断有没有该属性，如果有删除返回真，若没有，直接返回真
>> 如果删除了原型上的属性，所有实例都访问不到该属性 
> 属性的判断
>> 判断对象上是否有自己实例上指定的属性,如obj1.hasOwnProperty('name')
>> 判断对象的原型链上是否有指定的属性,如"LEGS" in obj1;
>> 判断属性只在原型上有
```javascript
        function hasPrototypeProperty(obj,name){
            return !obj.hasOwnProperty(name) && (name in obj);
        }
```
> 属性的定义
>> 定义单个属性
```javascript 
Object.defineProperty(对象,属性名,
{value:属性值,
enumerable:true,//是否可以枚举,默认是false
writable:true,//是否可写(赋值),默认是false
configurable:true//是否可删除,是否可以修改属性的权限，默认是false
}
);
```
>> 定义多个属性
```javascript
Object.defineProperties(对象,{
    属性名1:{value:属性值,writable:true},
    属性名2:{value:属性值,enumerable:true},
    属性名3:{value:属性值}
});
```
>> 查看属性的权限
```javascript
Object.getOwnPropertyDescriptor(对象,属性名)
```
* 继承

> 改变函数内部的this指向
>> 调用函数时,函数名.call(参数1,参数2....),call 第一个参数是被调用函数里面的this,后面是对应的参数列表
>>  调用函数时,函数名.apply(参数1,[]),apply 第一个参数是被调用函数里面的this,第二个是参数接受一个数组做为参数列表
>> 函数名.bind(参数),bind会返回一个函数,函数内部的this就是bind的参数

> 继承1
```javascript
function 子类(属性1,属性2,属性3){
    父类.call(this,属性1,属性2);//属性的继承
    this.属性3 = 属性3; //子类的属性
}

子类.prototype = 父类.prototype; //方法的继承
子类.prototype.方法 = function(){} //子类的方法
```
> 缺点:
> 由于方法的继承是引用赋值,所以父类也会有子类的方法

> 继承2
```javascript
function 子类(属性1,属性2,属性3){
    父类.call(this,属性1,属性2);//属性的继承
    this.属性3 = 属性3; //子类的属性
}

//方法的继承
for(i in 父类.prototype){
    子类.prototype[i] = 父类.prototype[i];
}
子类.prototype.方法 = function(){} //子类的方法
```
> 缺点:
> 如果父类的方法是不可枚举的,子类就继承不到

> 继承3
```javascript
function 子类(属性1,属性2,属性3){
    父类.call(this,属性1,属性2);//属性的继承
    this.属性3 = 属性3; //子类的属性
}

//方法的继承
子类.prototype = new 父类();//子类的prototype指向父类的一个实例
子类.prototype.constructor = 子类;
子类.prototype.方法 = function(){} //子类的方法
```
> 缺点:
> 调用两次父类的构造函数,同时在子类的原型上产生了不必要的父类的属性


> 继承4
```javascript
function 子类(属性1,属性2,属性3){
    父类.call(this,属性1,属性2);//属性的继承
    this.属性3 = 属性3; //子类的属性
}

//方法的继承
子类.prototype = Object.create(父类.prototype);
子类.prototype.constructor = 子类;
子类.prototype.方法 = function(){} //子类的方法
```
> Object.create(参数)
> Object.create(参数)会创建一个新对象,新创建对象的__proto__对象就是参数




### 正则体验
* 从字符串中找出数字

```javascript
str.match(/\d+/g);
```

* 替换字符
```javascript
var reg = /is/g;
str.replace(reg,"**");
var reg = /\bis\b/g;
str.replace(reg,"**");
```

* 过滤关键词
```javascript
var reg = /淘宝|京东/g;
str.replace(reg,"**");
```

* 替换html标签
```javascript
var reg = /<[^<>]+>/g;
str.replace(reg,"**");
```
* 邮箱校验
```javascript
var reg = /^\w+@[0-9a-z-]+\.[a-z]+$/i;
reg.test(value)
```

* 是否有汉字
```javascript
var reg = /[\u4e00-\u9fa5]+/g;
reg.test(value)
```

* 计算汉字的长度
```javascript
function getLength(str){
    return str.replace(/[\u4e00-\u9fa5]/g,"aa").length;
}
```

* URL解析
```javascript
var reg = /(\w+):\/\/([\w\.]+)\/(\w*)/;
str.match(reg)
```

****

### 什么是正则
匹配字符串的规则

### 创建正则对象

* 方法一(构造函数): new RegExp(规则,修正模式) 如:new RegExp('a','g')

* 方法二(字面量): /规则/修正模式 如:var reg = /a/


### 原子(正则中的最小匹配单位)

* 可见原子-键盘输出后可以看得见的字符,如符号,英文,数字等

> 注意,以下字符具有特殊含义,如果要使用原本的字符意思,需要在前面添加\来转义
> >  . * + ? $ ^ | \ () {} []

* 不可见原子-键盘输出后看不见的字符,如换行(\n),回车(\r),制表符(\t),垂直制表符(\v) 换页符(\f)

### 原子筛选
* |   竖线两边任意匹配 相当于或
* []  括号中任意一个原子,可以写区间(闭区间),如[a-z0-9]
* [^] 括号中任意一个原子之外的原子
* 注意:一般情况下,正则中的一个字符对应字符串中的一个字符, 例如:/ab\t/表示字符串中连续出现字符 ab制表符 
[]内是单独的字符 /[ab]/代表 a b ；/ab/代表 ab 相当于/(ab)/


### 原子集合
* . 除了回车和换行外的任意字符 等价[^\r\n]
* \d 任意数字,等价[0-9], \D 任意非数字 等价[^0-9]
* \w 任意数字,字母,下划线 等价[0-9a-zA-Z_],\W 任意非数字,字母,下划线 等价[^0-9a-zA-Z_]
* \s 空白符 等价于[\t\n\f\r],\S 非空白符 等价于[^\t\n\f\r]

### 量词(限定前面原子出现的次数)
* {n} 前面原子恰好出现n次
* {n,} 前面原子最少出现n次
* {n,m} 前面原子最少出现n次,最多出现m次
* + 前面原子最少出现1次 等价{1,}
* ? 前面原子最少出现0次,最多出现一次 等价{0,1}
* * 前面原子最少出现0次 {0,}
```javascript
'abcdeaada'.replace(/a{0,1}/g,'*');输出// "**b*c*d*e***d**"
'abcdeaada'.replace(/a{0,}/g,'*');输出// "**b*c*d*e**d**"

### 匹配模式
* 贪婪模式-尽可能多的匹配(默认)
```javascript
    '12345'.replace(/\d{2,4}/,'X');
    "X5"
```
* 非贪婪模式-尽可能少的匹配(在量词后添加?)
```javascript   
    '12345'.replace(/\d{2,4}?/,'X');
    "X345"
```
### 边界控制
* ^  匹配字符串开始的位置,限制必须以其后面的原子开头，前面不能有任何东西
* $  匹配字符串结尾的位置，限制必须以其前面的原子结束，后面不能有任何东西
* \b 单词边界 /is/ 表示为任何形式存在的is  /\bis\b/ 表示为单独存在的is
* \B 非单词边界
* () 把括号里面的正常表达匹配的结果当作一个原子来看,起到分组的效果,分组后可以通过反向引用来取得分组后的值,反向引用从$1开始

```javascript
//匹配四个一个小写字母加一个数字的字符串
'a1b2c3d4aaaa'.replace(/([a-z]\d){4}/,"*");
"*aaaa"
//将年月日替换成月日年
'2018-05-09'.replace(/(\d{4})-(\d{2})-(\d{2})/,'$2/$3/$1');
"05/09/2018"
```

### 修正模式
* i(ignoreCase) 忽略大小写,默认区分大小写,可以通过正则对象上的global属性查看
* g(global) 匹配所有的,默认只找到第一个,可以通过正则对象上的ignoreCase属性查看

### 前瞻
* 正则从文本头部向文本尾部解析,文本尾部成为"前",前瞻就是向前(文本尾部)检查是否符合断言

* 正向前瞻 exp(?=assert) 
匹配到exp的内容后(再看文本的前/内容的后)符合不符合assert,符合的话就匹配exp的内容

```javascript
//字符后面是数字的字符
'a2*3b&'.replace(/\w(?=\d)/g,'X')
X2*3b&
```
* 负向前瞻 exp(?!assert)、
匹配到exp的内容后再看(再看文本的前/内容的后)符合不符合assert,不符合的话就匹配exp的内容

```javascript
//字符后面不是数字的字符
'a2*3b&'.replace(/\w(?!\d)/g,'X')
"aX*XX&"
```

### 正则对象的方法
* 正则对象属性

> lastIndex 当前正则匹配内容的最后一个字符的下一个位置
> source 正则的文本字符串 
 
* RegExp.prototype.test(str);
检验str是否符合reg的规则
> test方法测试字符串是否有匹配到正则的字符串,有返回true,没有返回false 
> 如果全局匹配时,每一次匹配后正则对象上的lastIndex属性会更改,改为匹配内容的最后一个字符的下一个位置,所以结果会不可靠,一般使用test方法时建议不要全局匹配
> 如果非全局匹配时,lastIndex始终是0,也就是说始终从第0个元素开始查找

```javascript
var reg = /\w/g;
console.log("0::",reg.lastIndex);//0
console.log("1::",reg.test('ab'));//true
console.log("2::",reg.lastIndex);//1
console.log("3::",reg.test('ab'));//true
console.log("4::",reg.lastIndex);//2
console.log("5::",reg.test('ab'));//false
console.log("6::",reg.lastIndex);//0
```

* RegExp.prototype.exec(str);

> exec方法对字符串执行搜索,并更新正则对象上的lastIndex属性,如果没有匹配的返回null,有的话返回一个数组:
>> * 数组的第0个元素是匹配的内容,如果有分组,从下标是1开始是对应分组的内容
>> * index 是匹配内容第一个字符的位置
>> * input 是被搜索的字符串
> * 如果非全局匹配时,lastIndex始终是0,也就是说始终从第0个元素开始查找

```javascript
var reg = /(\d{4})-(\d{2})-(\d{2})/g;
var str = 'a2018-05-10b';
console.log(reg.lastIndex);//0
console.log(reg.exec(str));//["2018-05-10", "2018", "05", "10", index: 1, input: "a2018-05-10b", groups: undefined]
console.log(reg.lastIndex);//11
console.log(reg.exec(str));//null
console.log(reg.lastIndex);//0
console.log(reg.exec(str));//["2018-05-10", "2018", "05", "10", index: 1, input: "a2018-05-10b", groups: undefined]
```

### 字符串方法中使用正则
* String.prototype.search(reg)
('x') 或 (/x/)；返回找到第一个X字符的下标

> * 从字符中检索于正则相匹配的字符串,返回第一个匹配结果的index,查不到返回-1
> * search方法不执行全局匹配,它会忽略g,并且总是从字符串开始检索

* String.prototype.match(reg)

> * 非全局匹配的结果和exec一样

> * 全局匹配,会找到字符串中的所有匹配字符串,如果没有匹配的话返回null,有的话返回一个()内需求的数组:
该数组中的每一项就是一个匹配结果,该数组和exec不一样的地方是第0元素，该数组没有匹配的内容，只有分组的内容，不接受()的识别,数组中没有index和input等属性，
>> * 全局匹配不需要分组
var reg = /(\d{4})-(\d{2})-(\d{2})/g;
var str = 'a2018-05-10b';
console.log(str.match(reg));//["2018-05-10"]

* String.prototype.split(reg)

> 根据正则匹配的内容把字符串分隔成数组 
根据()内的规则分割，以/\d/数字为分割符
```javascript
'a1b2c3d'.split(/\d/);
["a", "b", "c", "d"]
```

* String.prototype.replace(reg,str2)

> 把字符串中 经过正则reg匹配的子串 用 str2 进行替换

* String.prototype.replace(reg,function(经过正则reg匹配的子串,index,原值))
  index为经过正则reg匹配的子串的下标
  原值为String.prototype的值
> 把字符串中 经过正则reg匹配的子串 传递到回调函数进一步处理,用函数的返回值来替换匹配项，可以对经过正则reg匹配的子串进行更进一步的约束，达到自己需求的结果

```javascript
var str = 'a1b2c3d4'.replace(/\d/g,function(match,index,origin){
    return parseInt(match)+1;
})
```

### String 对象方法
* 根据位置返回字符 str.charAt(index)

> * 位置在0和str.length-1之间,如果不在返回空字符
> * 一个汉子是一个字节 

* 根据位置返回字符的编码 str.charCodeAt(index)
	str的第index位元素的编码

> * 位置在0和str.length-1之间,如果不在返回空字符
> * 一个汉子是一个字节
> * charCodeAt返回的是字符的Unicode码
> * Unicode码是统一的编码,Unicode码包含了ASCII码(0-127)

* 根据字符返回位置 str.indexOf(str1) / str.lastIndexOf(str1)
查找str1在str的位置
> * indexOf 从前向后找,找不到返回-1，找到返回str1的下标
> * lastIndexOf 从后向前找,找不到返回-1，找到返回str1的下标

* URI 编码 encodeURIComponent(str)
* URI 解码 decodeURIComponent(str)

* 连接字符串 concat()  str1.concat(str2)

* 截取字符串 slice()  
  str2.slice(0,2)把str截取0到2的片段,不包括2
  str2.slice(-1,)把str截取-1（倒数第一位）到最后的片段,
  下标可以是负数,负数表示从尾部开始计算

* 截取字符串substr()  substr(起始下标,长度),下标可以是负数,负数表示从尾部开始计算

* 截取字符串 substring(起始下标,结束下标),下标不可以是负数

* 把字符串转换为小写 toLowerCase()
* 把字符串转换为大写 toUpperCase() 

* 保留小数位 toFixed()
* 搜索字符 str.search(str1)

### 获取表单元素
* document.forms 代表页面所有的表单集合
* document.forms[0].elements 代表某一个表单中的所有表单元素集合

* 获取一个表单中的元素的方法

> 表单元素集合[下标]
> 
> 表单元素集合["元素名"]
> 
> 表单元素集合.元素名
> 
> 表单.元素名
> 
> 同名的表单元素返回一个节点集合
 
* 表单元素.form 代表表单元素所在的form

### 表单元素的属性
* 禁用表单元素

> * 表单元素.disabled = true;

>> 针对所有表单元素
>> 
>> 值不会被提交

> * 表单元素.readOnly = true;
>> 只针对input(text/password)/textarea
>> 值会被提交

* 复选框选中属性 checked

> * 设置选中 aCheckBox[0].checked = true

* 单选框选中属性 checked

> * 设置选中 aRadio[0].checked = true

* 下拉框选中属性 selected

> * 设置某个选项选中 oSelect.options[i].selected = true
> * 通过选中属性获取所有选中项 
```
function getSelectedElements(oSelect){
    var result = [];
    for(var i=0;i<oSelect.options.length;i++){
        if(oSelect.options[i].selected){
            result.push(oSelect.options[i]);
        }
    }
    return result;          
}
```

### 表单元素方法
* 设置焦点 表单元素.focus();
* 移除焦点 表单元素.blur();

### 表单的提交和重置
* HTML按钮默认提交

> input type="submit"
> input type="image"
> button type="submit"

* 表单提交事件 表单.onsubmit

> * 表单被提交,数据没有发送前触发
> * 可以在该事件中通过阻止默认行为来阻止表单的提交

* 给普通按钮绑定事件,调用 form的submit()方法提交
这种form的 调用submit()函数方法不会触发 form.onsubmit事件

* HTML按钮默认提交重置

> input type="reset"
> button type="reset"


* 表单重置事件 表单.onrest 

> * 事件在表单重置前触发
> * 可以通过阻止默认行为来阻止重置

* 给普通按钮绑定事件,调用 form的reset()方法重置
这种form的 调用reset()函数的方法 会触发form.onrest事件
