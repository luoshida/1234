	js基本格式

1.写在元素标签的起始标签中
<body>
	<input type="checkbox" name="check" 
	onclick="abc.style.display='none';" 
	onmouseover="document.getElementById('abc').style.border='none';" 
	onmouseout="document.getElementById('abc').style.border='1px solid red'">
	<div id="abc">123</div>
</body>
2.写在script标签中
<head>
<script type="text/javascript">
	function nihao(){  (定义)
		alert('hi')
	}
	nihao()            (执行)
	
	function change(){ (定义)
		var abc=document.getElementById('box')
		abc.style.background='green';
		abc.style.width='200px';
		}
	</script>
</head>
<body>
	<div id="box" onclick="change()"(执行)></div>
</body>
注意事项
任何属性都可以修改
任何标签都可以有ID属性,可以通过ID属性获取该元素
修改属性时，HTML当中怎么写，JS当中就怎么写,但class是特例,用className
修改样式的格式：xxx.style.属性＝值
JS用style修改属性时，如果CSS的属性有"-"的话，通常把"-"去掉，然后把"-"后面的单词首字母大写
可以把多行代码写在一起,然后给他起个名字,这就是函数
函数分为定义和执行,二者缺一不可 
函数可以多次执行
变量相当于值的一个别名,变量出现的地方就相当于值本身

	js外部引用

<script defer='defer'/async='async' src="font.js">
在外部引用一个.js文件实现js的使用
</script>
延迟属性defer,添加该属性后,脚本文件会在整个页面都解析完毕后执行
异步属性async,添加该属性后,脚本会立即下载执行,但不妨碍页面中的其他操作

	js语法

 noscript标签
指定在不支持脚本的浏览器中显示替代内容
代替内容只在以下情况出现
浏览器自身不支持脚本
浏览器持脚本,但是被禁用了
<body>
<noscript>
	<p>您没有脚本执行的环境，请。。。</p>	
</noscript>
</body>
 严格模式(strict mode)
作用:告诉JS引擎切换到严格模式下解析代码,这种模式可以消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为,这是在ES5中新增的一种运行模式
使用:针对整个文件,将"use strict"放在脚本文件的第一行,则整个脚本都将以"严格模式"运行,如果这行语句不在第一行,则无效
针对单个函数,将"use strict"放在函数体的第一行,则整个函数以"严格模式"运行。
注意点:同样的代码,在"严格模式"中,可能会有不一样的运行结果;一些在"正常模式"下可以运行的语句,在"严格模式"下将不能运行
<script> 针对整个文件			
	'use strict'			
        function sayHi(){           		
		alert(!this);					
        }       
        sayHi();
</script>
<script> 针对单个函数			
	function sayHi(){ 
		'use strict'          		
		alert(!this);					
        }       
        sayHi();
</script>


	js语法规范

 区分大小写
标示符(变量,函数,属性,参数的名字)的规则
第一个字符必须是字母,下划线(_)或者美元符号($)
其他字符可以是字母,下划线(_)或者美元符号($)或者数字
命名一般采用驼峰大小写格式,即第一个字母小写,剩下的每个单词首字母大写
不能用关键字,保留字做为标示符 
 单行注释
// 我是单行注释
 多行注释
/*我是多行注释*/
语句结尾的分号不是必须的,但建议都加上